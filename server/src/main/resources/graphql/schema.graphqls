scalar Date
scalar FloatNaN

input PlateIds {
    ids: [Int]
}

type FeatureData {
    featureId: ID
    featureName: String
}

type FeatureValue {
    # Plate info
    plateId: ID
    # Feature info
    featureId: ID
    value: FloatNaN
    # Well info
    wellId: ID
    wellType: String
    row: Int
    column: Int
}

type PlateData {
    plateId: ID
    barcode: String
    wells: [WellData]
}

type PlateResultSetData {
    plate: PlateData
    protocol: ProtocolData
}

type ProtocolData {
    protocolId: ID
    protocolName: String
    features: [FeatureData]
}

type WellData {
    wellId: ID
    wellType: String
    row: Int
    column: Int
}

enum StatusCode {
    SCHEDULED
    SUCCESS
    FAILURE
}

type ErrorDTO {
    timestamp: Date
    exceptionClassName: String
    exceptionMessage: String
    description: String
    featureId: ID
    featureName: String
    sequenceNumber: Int
    formulaId: ID
    formulaName: String
    civType: String
    civVariableName: String
    civSource: String
    exitCode: Int
    statusMessage: String
    featureStatId: ID
    featureStatName: String
    newResultSetId: ID
}

type ResultSetDTO {
    id: ID
    protocolId: ID
    plateId: ID
    measId: ID
    executionStartTimeStamp: Date
    executionEndTimeStamp: Date
    outcome: StatusCode
    errors: [ErrorDTO]
    errorsText: String
}

type ResultFeatureStatDTO {
    id: ID
    resultSetId: ID
    featureId: ID
    featureStatId: ID
    statisticName: String
    value: FloatNaN
    welltype: String
    statusCode: StatusCode
    statusMessage: String
    exitCode: Int
    createdTimestamp: Date
}

type ResultDataDTO {
    id: ID
    resultSetId: ID
    featureId: ID
    values: [FloatNaN]
    statusCode: StatusCode
    statusMessage: String
    exitCode: Int
    createdTimestamp: Date
    resultFeatureStats: [ResultFeatureStatDTO]
}

input ResultSetFilter {
    ids: [ID] = []
    plateIds: [ID] = []
    measurementIds: [ID] = []
    protocolIds: [ID] = []
    status: [StatusCode] = []
    mostRecentResultSetOnly: Boolean = false
}

input ResultDataFilter {
    resultDataIds: [ID] = []
    resultSetIds: [ID] = []
    protocolIds: [ID] = []
    featureIds: [ID] = []
}

type CurveInputParamDTO {
    curveId: ID
    name: String
    stringValue: String
    numericValue: FloatNaN
}

type CurveOutputParamDTO {
    curveId: ID
    name: String
    stringValue: String
    numericValue: FloatNaN
}

type CurveDTO {
    id: ID
    plateId: ID
    protocolId: ID
    featureId: ID
    resultSetId: ID
    substanceName: String
    substanceType: String
    fitDate: Date
    version: String
    wells: [ID]
    wellConcentrations: [Float]
    featureValues: [Float]
    xAxisLabels: [Float]
    plotDoseData: [Float]
    plotPredictionData: [Float]
    weights: [Float]
    inputParameters: [CurveInputParamDTO]
    curveOutputParameters: [CurveOutputParamDTO]
}

type Query {
    latestPlateResultByPlateId(plateId: ID): PlateResultSetData
    protocolsByPlateId(plateId: ID): [ProtocolData]
    protocolsByExperimentId(experimentId: ID): [ProtocolData]
    featureValuesByPlateIdAndFeatureIdAndProtocolId(plateId: ID, featureId: ID, protocolId: ID): [FeatureValue]

    resultSets(filter: ResultSetFilter): [ResultSetDTO]

    resultSetById(resultSetId: ID): ResultSetDTO
    resultSetByIds(resultSetIds: [ID]): [ResultSetDTO]
    resultSetsByPlateId(plateId: ID): [ResultSetDTO]
    resultSetsByPlateIds(plateIds: [ID]): [ResultSetDTO]
    resultSetsByProtocolId(protocolId: ID): [ResultSetDTO]
    resultSetsByProtocolIds(protocolIds: [ID]): [ResultSetDTO]
    resultSetsByMeasurementId(measurementId: ID): [ResultSetDTO]
    resultSetsByMeasurementIds(measurementIds: [ID]): [ResultSetDTO]
    resultSetsByStatus(status: StatusCode): [ResultSetDTO]
    resultSetsByPlateIdAndMeasurementId(plateId: ID, measurementId: ID): [ResultSetDTO]

    latestResultSetByPlateId(plateId: ID): ResultSetDTO
    latestResultSetsByPlateIds(plateIds: [ID]): [ResultSetDTO]

    resultFeatureStat(resultSetId: ID, resultFeatureStatId: ID): ResultFeatureStatDTO
    resultSetFeatureStats(resultSetId: ID): [ResultFeatureStatDTO]

    resultData(filter: ResultDataFilter) : [ResultDataDTO]
    resultDataById(resultDataId: ID): ResultDataDTO
    resultDataByResultSetId(resultSetId: ID): [ResultDataDTO]
    resultDataByFeatureIdAndResultSetId(featureId: ID, resultSetId: ID): ResultDataDTO
    resultDataByPlateIdAndResultSetId(plateId: ID, resultSetId: ID): [ResultDataDTO]
    resultDataByPlateIdAndFeatureIdAndResultSetId(plateId: ID, featureId: ID, resultSetId: ID): ResultDataDTO
    resultDataByPlateIdsAndFeatureIdAndResultSetId(plateIds: [ID], featureId: ID, resultSetId: ID): [ResultDataDTO]

    resultDataByResultSetIdAndResultDataId(resultSetId: ID, resultDataId: ID): ResultDataDTO

    resultDataByPlateIdAndProtocolIdAndFeatureId(plateId: ID, protocolId: ID, featureId: ID): [ResultDataDTO]
    featureStatsByResultSetId(resultSetId: ID!, statName: String, wellTypes: [String]): [ResultFeatureStatDTO]

    getCurveById(curveId: ID): CurveDTO
    getCurvesByPlateId(plateId: ID): [CurveDTO]
    getCurvesByPlateIds(plateIds: [ID]): [CurveDTO]
    getCurvesBySubstanceName(substanceName: String): [CurveDTO]
    getCurvesBySubstanceType(substanceType: String): [CurveDTO]
    getCurvesByFeatureId(featureId: ID): [CurveDTO]
    getCurvesThatIncludesWellId(wellId: ID): [CurveDTO]
    getCurvesByWellIds(wellIds: [ID], resultSetId: ID): [CurveDTO]
}
